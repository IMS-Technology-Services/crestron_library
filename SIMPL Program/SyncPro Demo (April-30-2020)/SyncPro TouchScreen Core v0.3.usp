/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name: SyncPro
System Name: SyncPro Modules Library
Programmer: OB (2020)
*/

//Compiler Directives
#SYMBOL_NAME "SyncPro TouchScreen Core v0.3"
#CATEGORY "0" 

#DEFAULT_VOLATILE
#ENABLE_STACK_CHECKING
#ENABLE_TRACE
#PRINT_TO_TRACE
#ENCODING_UTF16

//Constants
#DEFINE_CONSTANT TRUE 1
#DEFINE_CONSTANT FALSE 0

#DEFINE_CONSTANT DEBUG TRUE
#DEFINE_CONSTANT PULSE_TIME 50	//50 milliseconds

//Constants
#DEFINE_CONSTANT NUMBER_OF_APPS 10
#DEFINE_CONSTANT NUMBER_OF_HOMEPAGE_SHORTCUTS 6
#DEFINE_CONSTANT MAX_KEY_VALUE_LENGTH 100
#DEFINE_CONSTANT MAX_INPUT_LENGTH 500
#DEFINE_CONSTANT NUMBER_OF_HARD_BUTTONS 5



#HELP_BEGIN
   This is the core module for a SyncPro Generic device.
   For more information - https://spdocs.syncpro.io/syncpro-modules/syncpros-crestron-modules
#HELP_END


//Include Libraries  
#USER_SIMPLSHARP_LIBRARY "SyncProLibrary"

//Generic device properties
//Inputs
digital_input _SKIP_,_SKIP_,GetDeviceInfo,GetDeviceConfig,SetDeviceConfig,_SKIP_,DeviceOffline, DeviceOnline;
string_input _SKIP_,_SKIP_,DeviceCommonTelemetryMsg$[MAX_KEY_VALUE_LENGTH];
string_input _SKIP_,IpAddress$[MAX_INPUT_LENGTH],MacAddress$[MAX_INPUT_LENGTH];

//Outputs
digital_output _SKIP_,_SKIP_,_SKIP_,AU_CheckNow;
digital_output _SKIP_,HardButtonOn[NUMBER_OF_HARD_BUTTONS,NUMBER_OF_HARD_BUTTONS];
string_output _SKIP_,DeviceModel$,DeviceName$,_SKIP_,AU_ManifestUrl$;


//Parameters
STRING_PARAMETER DeviceUuid[36];
STRING_PARAMETER DeviceAccessKey[450];

/*******************************************************************************************
		Global Variables
*******************************************************************************************/
BasicTouchScreen device;

/*******************************************************************************************
		Generic Functions
*******************************************************************************************/
function Initialize()
{
	device.InitDevice(DeviceUuid,DeviceAccessKey);

	//Online-offlince
	if (DeviceOffline)
	{
		device.UpdateStatus("offline");
	}
	else
	{
		device.UpdateStatus("online");
	}
}

//Update AU parameters
function TriggerAutoUpdate()
{
	string manifest[250];
	
	manifest = device.GetManifestUrl();

	if (len(manifest)>0)
	{
		AU_ManifestUrl$ = manifest;
		pulse(PULSE_TIME,AU_CheckNow);
	}
}


/*******************************************************************************************
		Event Handlers
*******************************************************************************************/
eventhandler UpdaterDeviceInfo(SyncProDevice sender, DeviceInfo info)
{
	DeviceModel$=device.deviceInfo.manufacturer.model;	
	DeviceName$=device.deviceInfo.name;
	
	//Update Manifest and check for new updates
	TriggerAutoUpdate();
}

//This is called whenever the S# module downloads and saves a new configuration file.
//It is used to push the device's config to Simpl
eventhandler UpdateConfigHandler(SyncProDevice sender, SyncProDeviceConfig config)
{
	HardButtonOn[1] = device.deviceConfig.userInterfaceProperties.hardButtons.powerButton;
	HardButtonOn[2] = device.deviceConfig.userInterfaceProperties.hardButtons.homeButton;
	HardButtonOn[3] = device.deviceConfig.userInterfaceProperties.hardButtons.lightsButton;
	HardButtonOn[4] = device.deviceConfig.userInterfaceProperties.hardButtons.upButton;
	HardButtonOn[5] = device.deviceConfig.userInterfaceProperties.hardButtons.downButton;
}

/*******************************************************************************************
		Generic SIMPL events
*******************************************************************************************/
push GetDeviceInfo{device.GetDeviceInformation(); }
push GetDeviceConfig
{
	device.GetAndApplyDeviceConfigurations();
}

push SetDeviceConfig
{
	device.SetDeviceConfigurations();
}     

push DeviceOffline{
	device.UpdateStatus("offline");
}

push DeviceOnline{
	device.UpdateStatus("online");
}
        
//Sends device's telemetery
//string stracture should be validated json format representing a Telemetery message object - 
//"common":{"Key":"commonKey","Value":"value"}
//"custom":{"Key":"customKey","Value":"value"}
change DeviceCommonTelemetryMsg${
	device.SendCommonTelemetry(DeviceCommonTelemetryMsg$);
}

change IpAddress${
	device.deviceConfig.networkProperties.ipAddress = IpAddress$;
	device.SetDeviceConfigurations();
}

change MacAddress${
    device.deviceConfig.networkProperties.macAddress = MacAddress$;
  	device.SetDeviceConfigurations();
}

//Main Function
Function Main()
{
	WaitForInitializationComplete();
	
	//Register to events
	RegisterEvent(device, DeviceInfoUpdate, UpdaterDeviceInfo);
	RegisterEvent(device, ConfigUpdate, UpdateConfigHandler);
	Initialize();
}


